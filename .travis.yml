language: cpp

dist: trusty
sudo: false

matrix:
  include:
    - os: linux
      compiler: gcc
      env: IMAGE=coryan/jaybeamsdev-ubuntu16.04 COMPILER=g++ CXXFLAGS=-O3 CHECK_STYLE=yes CONFIGUREFLAGS="

    - os: linux
      compiler: gcc
      env: IMAGE=coryan/jaybeamsdev-ubuntu14.04 COMPILER=g++ CXXFLAGS="-O0 -g -coverage" COVERAGE=yes CONFIGUREFLAGS=""

    - os: linux
      compiler: gcc
      env: IMAGE=coryan/jaybeamsdev-fedora25 COMPILER=clang++ CXXFLAGS=-g GENDOCS=yes CONFIGUREFLAGS=""

    - os: linux
      compiler: gcc
      env: IMAGE=coryan/jaybeamsdev-ubuntu16.04 COMPILER=g++ CXXFLAGS=-g CONFIGUREFLAGS=""

    - os: linux
      compiler: gcc
      env: IMAGE=coryan/jaybeamsdev-fedora24 COMPILER=clang++ CXXFLAGS=-O3 CONFIGUREFLAGS=""

services:
  - docker

script:
  - docker pull ${IMAGE?}
  - docker image inspect -f '{{ .Id }}' ${IMAGE?}
  - docker run --rm -it --env CXX=${COMPILER?} --env CXXFLAGS="${CXXFLAGS}" -v $PWD:$PWD ${IMAGE?} /bin/sh -c "cd $PWD && ./bootstrap && ./configure ${CONFIGUREFLAGS} --prefix=$PWD/staging && make -j 2 check && mkdir staging && make install"
  - cat test-suite.log || echo "Could not print test logs"
  - ci/check-style.sh

before_install:
  - sudo apt-get update
  - sudo apt-get install docker-engine

install:
  - if [ "x${COVERAGE}" = "xyes" ]; then gem install coveralls-lcov ; fi

after_success:
  # We take some additional action on successful builds ...
  - cd ${TRAVIS_BUILD_DIR?}
  # ... if this is a code coverage build we upload the coverage results ...
  - ci/coverage.sh
  # ... create the Doxygen documentation inside the docker container,
  # and then push it using the host ...
  - ci/gendocs.sh
  # Create the build image, the script detects if the conditions are not suitable ...
  - ci/create-build-image.sh
  # ... create the runtime images, the script detects if the conditions are not suitable ...
  - ci/create-runtime-image.sh

notifications:
  email: false
