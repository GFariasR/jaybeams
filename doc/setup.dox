/*!
@page setup Configuration Guide: Howto Setup your Workstation to Compile JayBeams

@section setup_intro Introduction

These are my notes on how to prepare your environment to build
JayBeams.  If you find a problem with the instructions, please submit
a patch for the instructions so I can fix the problem.

@section fedora Fedora 21 and 22

We assume that you have superuser privileges in your workstation.  The
instructions were originally written for Fedora 21, I will try to make
them more generic over time.  Please submit patches to support other
systems.

@subsection fedora_install_tools Installing the Developement Tools

The first thing you should do is install the basic development tools
and libraries. 

@code
sudo yum install git gcc-c++ make clang autoconf automake autoconf-archive
sudo yum install boost-devel boost
sudo yum install fftw-devel fftw-libs-single fftw-libs-double fftw-libs-quad
sudo yum install ocl-icd opencl-headers
sudo yum install yaml-cpp-devel
@endcode

@subsection fedora_install_libraries Installing Additional Libraries

<b>Skye (Small Mocking framework)</b>

@code
wget -q https://github.com/coryan/Skye/releases/download/v0.1/Skye-0.1.tar.gz
tar -xf Skye-0.1.tar.gz
(cd Skye && ./configure && make check && sudo make install)
@endcode

<b>clFFT (FFT library for OpenCL)</b>

@code
wget https://github.com/clMathLibraries/clFFT/archive/v2.6.1.tar.gz
tar xf clFFT-2.6.1.tar.gz
cd clFFT-2.6.1/src
cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/clFFT-2.6.1 .
make
sudo make install
cd ..

# ... use this to avoid settint LD_LIBRARY_PATH everywhere ...
echo /usr/local/clFFT-2.6.1/lib64 >/tmp/clfft-2.6.1.conf
sudo cp /tmp/clfft-2.6.1.conf /etc/ld.so.conf.d/
sudo ldconfig
@endcode

<b>Download and install Boost.Compute</b>

@code
wget https://github.com/boostorg/compute/archive/v0.4.tar.gz
tar -xf v0.4.tar.gz
mkdir build ; cd build
CC=clang CXX=clang++ cmake \
  -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/boost-compute-0.4 \
  -DBOOST_COMPUTE_THREAD_SAFE=ON \
  -DCMAKE_CXX_FLAGS="-Wall -pedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow -Qunused-arguments -DCL_VERSION_1_2 -Wno-deprecated-declarations -Wno-constant-logical-operand" ..
make
sudo make install
@endcode

@subsection fedora_build Checkout the Code and Build

This is the easy part:

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./bootstrap
mkdir clang
cd clang
CXX=clang++ CC=clang ../configure
# Just compile the code
make
# Compile the code, the tests and run the tests
make check
#
@endcode

@section ubuntu_precise Ubuntu 12.04 (Precise Pangolin LTS)

This is a popular platform for Cloud services and, consequently, for
hosted continuous integration environments.  Unfortunately the
platform is also rather old, so you need to install backports of most
of the development tools.

@code
sudo apt-get -qq -y install python-software-properties
sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
sudo add-apt-repository -y ppa:dns/gnu
sudo add-apt-repository -y ppa:boost-latest/ppa
sudo add-apt-repository -y "deb http://llvm.org/apt/precise/ llvm-toolchain-precise main"
sudo add-apt-repository -y "deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.6 main"
# ... add the public key used by llvm.org ...
wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -
sudo apt-get -qq update
sudo apt-get -qq -y install clang-3.6
sudo apt-get -qq -y install g++-4.9
sudo apt-get -qq -y install boost1.55
sudo apt-get -qq -y install autoconf automake make
sudo apt-get -qq -y install git
wget -q http://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2015.02.24.tar.xz
tar -xf autoconf-archive-2015.02.24.tar.xz
(cd autoconf-archive-2015.02.24 && ./configure --prefix=/usr && make && sudo make install)

sudo apt-get -qq -y install cmake
wget -q https://github.com/jbeder/yaml-cpp/archive/release-0.5.1.tar.gz
tar -xf release-0.5.1.tar.gz
(cd yaml-cpp-release-0.5.1 && mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=/usr .. && make && make test && sudo make install)
@endcode

@subsection ubuntu_install_libraries Installing Additional Libraries

Even after all that, you still need to install a number of additional
libraries:

<b>Skye (Small Mocking framework)</b>

@code
wget -q https://github.com/coryan/Skye/releases/download/v0.2/skye-0.2.tar.gz
tar -xf skye-0.2.tar.gz
(cd skye-0.2 && CXX=g++-4.9 CC=gcc-4.9 ./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu/ && make check && sudo make install)
@endcode

<b>clFFT (FFT library for OpenCL)</b>

@code
wget https://github.com/clMathLibraries/clFFT/archive/v2.6.1.tar.gz
tar xf clFFT-2.6.1.tar.gz
cd clFFT-2.6.1/src
cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/clFFT-2.6.1 .
make
sudo make install
cd ..

# ... use this to avoid settint LD_LIBRARY_PATH everywhere ...
echo /usr/local/clFFT-2.6.1/lib64 >/tmp/clfft-2.6.1.conf
sudo cp /tmp/clfft-2.6.1.conf /etc/ld.so.conf.d/
sudo ldconfig
@endcode


<b>Download and install Boost.Compute</b>

@code
wget https://github.com/boostorg/compute/archive/v0.4.tar.gz
tar -xf v0.4.tar.gz
mkdir build ; cd build
CC=clang CXX=clang++ cmake \
  -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/boost-compute-0.4 \
  -DBOOST_COMPUTE_THREAD_SAFE=ON \
  -DCMAKE_CXX_FLAGS="-Wall -pedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow -Qunused-arguments -DCL_VERSION_1_1 -Wno-deprecated-declarations -Wno-constant-logical-operand" ..
make
sudo make install
@endcode

@subsection ubuntu_build Checkout the Code and Build

This is the easy part:

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./bootstrap
mkdir clang
cd clang
CXX=clang++-3.6 CC=clang-3.6 ../configure
# Just compile the code
make
# Compile the code, the tests and run the tests
make check
#
@endcode

*/
