/*!
@page setup Configuration Guide: Howto Setup your Workstation to Compile JayBeams

@section setup_intro Introduction

These are my notes on how to prepare your environment to build
JayBeams.  If you find a problem with the instructions, please submit
a patch for the instructions so I can fix the problem.

@section docker Setting up a Docker based Development Environment

Use any of the Dockerfiles found in the `docker/dev/*/Dockerfile` to
create an image with all the necessary tools, we will use Ubuntu
14.04 as an example, but all of them would work in a similar fashion.

We are going to call this image `jbdevub14.04`, you may want
to a shorter or longer name to suite your taste.
We assume that [docker](https://docker.io) is installed and configured
in your workstation.
We also assume the current user has enough privileges to
run the docker command, otherwise all such commands need to be
prefixed with `sudo`.

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
docker build -t jbdevub14.04 docker/dev/ubuntu14.04
@endcode

@subsection docker_build Building a Docker Image for Development

You could then run a shell within that image, download the Jaybeams
source code and compile it, in this case:

@code
docker run --rm -it jbdevub14.04 /bin/bash
# The following commands are executed inside the shell
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./bootstrap
./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu
make -j 4 check
@endcode

@subsection docker_mount Using the Working Directory in the Docker Container

Sometimes it is convenient to use the jaybeams working directory
inside the container, that allows you to test the same code with
multiple distributions and compilers before you push the data.
We provide a script that creates a docker image with a clone of your
USER and UID inside the container, and mounts your current working
copy as a volume.

To test it run:

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./docker/dev/runvariant.sh docker/dev/ubuntu14.04
@endcode

That command will drop you into a shell inside the container for
Ubuntu 14.04 with all the necessary development tools and dependencies
pre-installed.  You can then use it as normal, for example:

@code
./docker/dev/runvariant.sh docker/dev/ubuntu14.04
whoami
ls -l
# You can edit files inside the docker container or in the host
./bootstrap
mkdir build
cd build
./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu
make -j 4 check
@endcode

@subsection docker_test Testing Docker Development Images

From time to time you may need to modify or add a docker image, for example,
to add new dependencies, or because a new version of a distribution or
compiler has become available.  Each directory has a helper Dockerfile
that can be used to test if the image can be used for development.
For example, let's suppose you have modified the Fedora 23 Dockerfile
and want to test it, simply run:

@code
cat docker/dev/fedora23/Dockerfile{,.test} | docker build -
@endcode

@section fedora Fedora 21 and 22

We assume that you have superuser privileges in your workstation.  The
instructions were originally written for Fedora 21, I will try to make
them more generic over time.  Please submit patches to support other
systems.

Installing the developement tools:

@code
sudo yum install git gcc-c++ clang boost-devel boost autoconf automake autoconf-archive make

# Patch the autoconf library
rpm -q autoconf-archive | grep -q 2016.03.20 && sudo patch -p0 < m4/ax_cxx_compile_stdcxx.m4.patch 

# YAML-CPP (C++ Wrappers for YAML files)
sudo yum install yaml-cpp-devel

# Skye (Small Mocking framework)
wget -q https://github.com/coryan/Skye/releases/download/v0.3/skye-0.3.tar.gz
tar -xf skye-0.3.tar.gz
(cd skye-0.3 && ./configure && make check && sudo make install)
@endcode

@subsection fedora_build Checkout the Code and Build

This is the easy part:

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./bootstrap
mkdir clang
cd clang
CXX=clang++ CC=clang ../configure
# Just compile the code
make
# Compile the code, the tests and run the tests
make check
#
@endcode

@section ubuntu_xenial Ubuntu 16.04 (Xenial Xenus LTS)

@code
# Install the tools, compilers, etc.
sudo apt-get install automake g++ gcc libfftw3-dev libyaml-cpp-dev libboost-all-dev autoconf-archive git make

# Skye (Small Mocking framework)
wget -q https://github.com/coryan/Skye/releases/download/v0.3/skye-0.3.tar.gz
tar -xf skye-0.3.tar.gz
(cd skye-0.3 && CXX=g++ CC=gcc CPPFLAGS=-D_GLIBCXX_USE_CXX11_ABI=1 ./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu && make check && sudo make install)
@endcode

@subsection ubuntu_xenial_build

This should be the easy part:

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./bootstrap
mkdir gcc && cd gcc
CXX=g++ CC=gcc CPPFLAGS=-D_GLIBCXX_USE_CXX11_ABI=1 ../configure  --with-boost-libdir=/usr/lib/x86_64-linux-gnu
make -j 4 check
@endcode

If you want to use FFTW3 to run time delay analysis use:

@code
CXX=g++ CC=gcc CPPFLAGS=-D_GLIBCXX_USE_CXX11_ABI=1 ../configure  --with-boost-libdir=/usr/lib/x86_64-linux-gnu --enable-fftw3
make -j 4 check
@endcode

*/
